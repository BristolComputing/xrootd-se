#############################
# Configure XRootD security
#############################
# security library
xrootd.seclib libXrdSec.so

# general security options
set hostcert = /etc/grid-security/xrd/hostcert.pem
set hostkey = /etc/grid-security/xrd/hostkey.pem
set certdir = /etc/grid-security/certificates

# authentication options (https://xrootd.slac.stanford.edu/doc/dev54/sec_config.htm)
# audit denied and granted requests
acc.audit deny grant
# authentication database file and refresh interval (in seconds)
acc.authdb /etc/xrootd/Authfile
acc.authrefresh 60
# enable authentication for the file system
ofs.authorize 1

# define how certificates will be processed
set supportedVOs = atlas,cms,dteam,dune,gridpp,lz,mu3e.org,ops,wlcg
set supportedGroups = /atlas,/cms,/dteam,/dune,/gridpp,/lz,/mu3e,/ops,/wlcg
sec.protocol /usr/lib64 gsi \
    -dlgpxy:1 \
    -exppxy:=creds \
    -ca:1 \
    -crl:3 \
    -cert:$(hostcert) \
    -key:$(hostkey) \
    -certdir:$(certdir) \
    -vomsfun:/usr/lib64/libXrdVoms.so \
    -vomsfunparms:certfmt=raw|grpopt=useall|vos=$(supportedVOs)|grps=$(supportedGroups)|dbg

sec.protocol ztn
# from https://xrootd-howto.readthedocs.io/en/latest/tpc/
# TLS:
xrd.tls $(hostcert) $(hostkey)
xrd.tlsca certdir $(certdir) refresh 8h
# xrootd.tls capable all -data
xrootd.tls capable all

#############################
# Macaroons and SciTokens
#############################
macaroons.secretkey /etc/xrootd/macaroon-secret
# Enable Macroons- and SciTokens-based mappings; if no token is present, then the GSI certificate will be used.
ofs.authlib ++ libXrdAccSciTokens.so config=/etc/xrootd/scitokens.cfg
ofs.authlib ++ libXrdMacaroons.so


######################################
# Configure HTTPS access and security
######################################
# HTTP(S) between redirector and server is tricky
# https://xrootd.slac.stanford.edu/doc/dev55/xrd_config.htm#_Toc88514016
# Recommended setup: HTTP on redirector, HTTPS on server
if exec xrootd
# general HTTP options
    # allow directory listings
    http.listingdeny no
    http.staticpreload http://static/robots.txt /etc/xrootd/robots.txt
    xrd.protocol http:$(httpsPort) /usr/lib64/libXrdHttp.so
    xrd.protocol http:$(httpsPort) +port
    # http.desthttps yes
    # from T2_US_Florida
    # http.cadir $(certdir)
    # http.cert $(hostcert)
    # http.key $(hostkey)
    # macaroons
    http.exthandler xrdmacaroons libXrdMacaroons.so
    # Pass the bearer token to the Xrootd authorization framework.
    http.header2cgi Authorization authz
    http.tlsreuse off
    xrootd.tlsreuse off

    # Enable third-party-copy
    http.exthandler xrdtpc libXrdHttpTPC.so

    # just to note that there can be differences between sec.protocol and http.secxtractor:
    # https://github.com/xrootd/xrootd/issues/1369
    # Full extraction gives something like:
    # sec.vorg="cms cms cms cms cms" sec.grps="/cms /cms/ALARM /cms/GGUSExpert /cms /cms/TEAM" sec.role="production NULL NULL NULL NULL"
    # where the first and 4th entries are identical except for the role. The latter role seems to have fewer permissions.
    # http.secxtractor /usr/lib64/libXrdVoms.so certfmt=raw|grpopt=usefirst|vos=$(supportedVOs)|grps=$(supportedGroups)|dbg
    http.secxtractor /usr/lib64/libXrdVoms.so certfmt=raw|grpopt=useall|vos=$(supportedVOs)|grps=$(supportedGroups)|dbg
fi

if $(xrdr) && exec xrootd
    # redirector HTTP options
    http.desthttps yes
else if exec xrootd
    # define what should be sent via TLS
    # https://xrootd.slac.stanford.edu/doc/dev50/xrd_config.htm#_tls
    # xrootd.tls capable all -data
    # reads as: all clients that are TLS capable should encrypt all requests except data requests
    
    # server HTTP options
    # xrd.tls $(hostcert) $(hostkey)
    # xrd.tlsca certdir $(certdir)
fi
